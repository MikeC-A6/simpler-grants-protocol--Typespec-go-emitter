import { CustomKeyMap } from "../emitter-framework/custom-key-map.js";
import { Realm } from "./realm.js";
import { $ } from "./typekit/index.js";
/**
 * Flow control for mutators.
 *
 * When filtering types in a mutator, the filter function may return MutatorFlow flags to control how mutation should
 * proceed.
 *
 * @see {@link MutatorFilterFn}
 *
 * @experimental
 */
export var MutatorFlow;
(function (MutatorFlow) {
    /**
     * Mutate the type and recur, further mutating the type's children. This is the default behavior.
     */
    MutatorFlow[MutatorFlow["MutateAndRecur"] = 0] = "MutateAndRecur";
    /**
     * If this flag is set, the type will not be mutated.
     */
    MutatorFlow[MutatorFlow["DoNotMutate"] = 1] = "DoNotMutate";
    /**
     * If this flag is set, the mutator will not proceed recursively into the children of the type.
     */
    MutatorFlow[MutatorFlow["DoNotRecur"] = 2] = "DoNotRecur";
})(MutatorFlow || (MutatorFlow = {}));
/**
 * Determines if a type is mutable.
 *
 * @experimental
 */
export function isMutableType(type) {
    switch (type.kind) {
        case "TemplateParameter":
        case "Intrinsic":
        case "Function":
        case "Decorator":
        case "FunctionParameter":
        case "Object":
        case "Projection":
        case "Namespace":
            return false;
        default:
            void type;
            return true;
    }
}
// #endregion
// #region Mutator Application
const typeId = CustomKeyMap.objectKeyer();
const mutatorId = CustomKeyMap.objectKeyer();
const seen = new CustomKeyMap(([type, mutators]) => {
    const key = `${typeId.getKey(type)}-${[...mutators.values()]
        .map((v) => mutatorId.getKey(v))
        .join("-")}`;
    return key;
});
/**
 * Mutate the type graph, allowing namespaces to be mutated.
 *
 * **Warning**: This function will likely mutate the entire type graph. Most TypeSpec types relate to namespaces
 * in some way (e.g. through namespace parent links, or the `namespace` property of a Model).
 *
 * @param program - The program in which the `type` occurs.
 * @param mutators - An array of mutators to apply to the type graph rooted at `type`.
 * @param type - The type to mutate.
 *
 * @returns an object containing the mutated `type` and a nullable `Realm` in which the mutated type resides.
 *
 * @see {@link mutateSubgraph}
 *
 * @experimental
 */
export function mutateSubgraphWithNamespace(program, mutators, type) {
    return mutateSubgraph(program, mutators, type);
}
/**
 * Mutate the type graph.
 *
 * Mutators clone the input `type`, creating a new type instance that is mutated in place.
 *
 * The mutator returns the mutated type and optionally a `realm` in which the mutated clone resides.
 *
 * @see {@link Mutator}
 * @see {@link Realm}
 *
 * **Warning**: Mutators _SHOULD NOT_ modify the source type. Modifications to the source type
 * will be visible to other emitters or libraries that view the original source type, and will
 * be sensitive to the order in which the mutator was applied. Only edit the `clone` type.
 * Furthermore, mutators must take care not to modify elements of the source and clone types
 * that are shared between the two types, such as the properties of any parent references
 * or the `decorators` of the type without taking care to clone them first.
 *
 * @param program - The program in which the `type` occurs.
 * @param mutators - An array of mutators to apply to the type graph rooted at `type`.
 * @param type - The type to mutate.
 *
 * @returns an object containing the mutated `type` and a nullable `Realm` in which the mutated type resides.
 *
 * @experimental
 */
export function mutateSubgraph(program, mutators, type) {
    const realm = new Realm(program, "realm for mutation");
    const interstitialFunctions = [];
    const mutated = mutateSubgraphWorker(type, new Set(mutators));
    if (mutated === type) {
        return { realm: null, type };
    }
    else {
        return { realm, type: mutated };
    }
    function mutateSubgraphWorker(type, activeMutators) {
        let existing = seen.get([type, activeMutators]);
        if (existing) {
            clearInterstitialFunctions();
            return existing;
        }
        let clone = null;
        const mutatorsWithOptions = [];
        // step 1: see what mutators to run
        const newMutators = new Set(activeMutators.values());
        for (const mutator of activeMutators) {
            const record = mutator[type.kind];
            if (!record) {
                continue;
            }
            let mutationFn = null;
            let replaceFn = null;
            let mutate = false;
            let recurse = false;
            if (typeof record === "function") {
                mutationFn = record;
                mutate = true;
                recurse = true;
            }
            else {
                mutationFn = "mutate" in record ? record.mutate : null;
                replaceFn = "replace" in record ? record.replace : null;
                if (record.filter) {
                    const filterResult = record.filter(type, program, realm);
                    if (filterResult === true) {
                        mutate = true;
                        recurse = true;
                    }
                    else if (filterResult === false) {
                        mutate = false;
                        recurse = true;
                    }
                    else {
                        mutate = (filterResult & MutatorFlow.DoNotMutate) === 0;
                        recurse = (filterResult & MutatorFlow.DoNotRecur) === 0;
                    }
                }
                else {
                    mutate = true;
                    recurse = true;
                }
            }
            if (!recurse) {
                newMutators.delete(mutator);
            }
            if (mutate) {
                mutatorsWithOptions.push({ mutator, mutationFn, replaceFn });
            }
        }
        const mutatorsToApply = mutatorsWithOptions.map((v) => v.mutator);
        // if we have no mutators to apply, let's bail out.
        if (mutatorsWithOptions.length === 0) {
            if (newMutators.size > 0) {
                // we might need to clone this type later if something in our subgraph needs mutated.
                interstitialFunctions.push(initializeClone);
                visitSubgraph();
                interstitialFunctions.pop();
                return clone ?? type;
            }
            else {
                // we don't need to clone this type, so let's just return it.
                return type;
            }
        }
        // step 2: see if we need to mutate based on the set of mutators we're actually going to run
        existing = seen.get([type, mutatorsToApply]);
        if (existing) {
            clearInterstitialFunctions();
            return existing;
        }
        // step 3: run the mutators
        clearInterstitialFunctions();
        initializeClone();
        for (const { mutationFn, replaceFn } of mutatorsWithOptions) {
            // todo: handle replace earlier in the mutation chain
            const result = (mutationFn ?? replaceFn)(type, clone, program, realm);
            if (replaceFn && result !== undefined) {
                clone = result;
                seen.set([type, activeMutators], clone);
                seen.set([type, mutatorsToApply], clone);
            }
        }
        if (newMutators.size > 0) {
            visitSubgraph();
        }
        $(realm).type.finishType(clone);
        return clone;
        function initializeClone() {
            clone = $(realm).type.clone(type);
            seen.set([type, activeMutators], clone);
            seen.set([type, mutatorsToApply], clone);
        }
        function clearInterstitialFunctions() {
            for (const interstitial of interstitialFunctions) {
                interstitial();
            }
            interstitialFunctions.length = 0;
        }
        function visitSubgraph() {
            const root = clone ?? type;
            switch (root.kind) {
                case "Model":
                    for (const prop of root.properties.values()) {
                        const newProp = mutateSubgraphWorker(prop, newMutators);
                        if (clone) {
                            clone.properties.set(prop.name, newProp);
                        }
                    }
                    if (root.indexer) {
                        const res = mutateSubgraphWorker(root.indexer.value, newMutators);
                        if (clone) {
                            clone.indexer.value = res;
                        }
                    }
                    break;
                case "ModelProperty":
                    const newType = mutateSubgraphWorker(root.type, newMutators);
                    if (clone) {
                        clone.type = newType;
                    }
                    break;
                case "Operation":
                    const newParams = mutateSubgraphWorker(root.parameters, newMutators);
                    if (clone) {
                        clone.parameters = newParams;
                    }
                    break;
                case "Scalar":
                    const newBaseScalar = root.baseScalar
                        ? mutateSubgraphWorker(root.baseScalar, newMutators)
                        : undefined;
                    if (clone) {
                        clone.baseScalar = newBaseScalar;
                    }
            }
        }
    }
}
// #endregion
//# sourceMappingURL=mutators.js.map