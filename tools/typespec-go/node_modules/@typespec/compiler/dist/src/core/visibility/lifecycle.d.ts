import type { Program } from "../program.js";
import type { Enum, EnumMember } from "../types.js";
/**
 * Returns the instance of `TypeSpec.Visibility.Lifecycle` for the given `program`.
 *
 * @param program - the program to get the lifecycle visibility enum for
 * @returns a reference to the lifecycle visibility enum
 */
export declare function getLifecycleVisibilityEnum(program: Program): Enum;
/**
 * Returns the member of `Lifecycle` that corresponds to the given legacy `visibility` string.
 *
 * @param program - the program to get the lifecycle visibility enum for
 * @param visibility - the visibility string to normalize
 * @returns the corresponding member of `Lifecycle` or `undefined` if the visibility string is not recognized
 */
export declare function normalizeLegacyLifecycleVisibilityString(program: Program, visibility: string): EnumMember | undefined;
/**
 * Returns the legacy visibility string that corresponds to the given `visibility` member of `Lifecycle`.
 *
 * If the given `visibility` member is not a member of `Lifecycle`, the function will return `undefined`.
 *
 * @param program - the program to get the lifecycle visibility enum for
 * @param visibility - the visibility modifier to normalize
 * @returns the corresponding legacy visibility string or `undefined` if the visibility member is not recognized
 */
export declare function normalizeVisibilityToLegacyLifecycleString(program: Program, visibility: EnumMember): string | undefined;
//# sourceMappingURL=lifecycle.d.ts.map