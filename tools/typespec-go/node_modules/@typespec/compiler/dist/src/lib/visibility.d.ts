import type { DefaultVisibilityDecorator, InvisibleDecorator, ParameterVisibilityDecorator, RemoveVisibilityDecorator, ReturnTypeVisibilityDecorator, VisibilityDecorator, WithDefaultKeyVisibilityDecorator, WithLifecycleUpdateDecorator, WithUpdateablePropertiesDecorator, WithVisibilityDecorator, WithVisibilityFilterDecorator } from "../../generated-defs/TypeSpec.js";
import type { Program } from "../core/program.js";
import { Operation } from "../core/types.js";
export declare const $withDefaultKeyVisibility: WithDefaultKeyVisibilityDecorator;
export declare const $parameterVisibility: ParameterVisibilityDecorator;
/**
 * Returns the visibilities of the parameters of the given operation, if provided with `@parameterVisibility`.
 *
 * @see {@link $parameterVisibility}
 */
export declare function getParameterVisibility(program: Program, entity: Operation): string[] | undefined;
export declare const $returnTypeVisibility: ReturnTypeVisibilityDecorator;
/**
 * Returns the visibilities of the return type of the given operation, if provided with `@returnTypeVisibility`.
 *
 * @see {@link $returnTypeVisibility}
 */
export declare function getReturnTypeVisibility(program: Program, entity: Operation): string[] | undefined;
export declare const $visibility: VisibilityDecorator;
export declare const $removeVisibility: RemoveVisibilityDecorator;
export declare const $invisible: InvisibleDecorator;
export declare const $defaultVisibility: DefaultVisibilityDecorator;
export declare const $withVisibility: WithVisibilityDecorator;
/**
 * Filters a model for properties that are updateable.
 *
 * @param context - the program context
 * @param target - Model to filter for updateable properties
 */
export declare const $withUpdateableProperties: WithUpdateablePropertiesDecorator;
export declare const $withVisibilityFilter: WithVisibilityFilterDecorator;
export declare const $withLifecycleUpdate: WithLifecycleUpdateDecorator;
//# sourceMappingURL=visibility.d.ts.map